---
title: "Graph representation corresponds to the credit card number"
author: "Boram_coco"
format: 
    dashboard:
     theme: default
     nav-buttons:
      - icon: github
        href: https://github.com/boram-coco
execute: 
  enabled: true
  cache: false
  freeze: false
  error: true
---

```{python}
import pandas as pd
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import plotly.express as px
import networkx as nx
import torch_geometric
import pickle
import itables
import matplotlib.pyplot as plt
from ipywidgets import interact, widgets

def plot_auc_curve(filtered_df):
    # 모델 별 최대 AUC 값 구하기
    max_auc_df = filtered_df.groupby('model')['auc'].max().reset_index()

    # AUC 값 기준으로 데이터프레임 정렬 (가장 큰 값이 왼쪽에 오도록)
    max_auc_df = max_auc_df.sort_values(by='auc', ascending=False)

    # AUC 커브 그리기
    fig = px.line(max_auc_df, x='model', y='auc', markers=True)
    fig.update_traces(line=dict(width=2))  # 라인 굵기 설정
    fig.update_layout(
        title='AUC Curve for Models',
        xaxis_title='Model',
        yaxis_title='AUC',
        xaxis=dict(tickangle=45),  # x축 라벨 회전
        hovermode='closest',  # 마우스 호버시 가장 가까운 점 정보 표시
    )

    # 커서를 댔을 때 추가 정보 표시
    def show_info(trace, points, selector):
        model_name = max_auc_df.iloc[points.point_inds[0]]['model']
        throw_rate = filtered_df[filtered_df['model'] == model_name]['throw_rate'].iloc[0]
        train_frate = filtered_df[filtered_df['model'] == model_name]['train_frate'].iloc[0]
        test_frate = filtered_df[filtered_df['model'] == model_name]['test_frate'].iloc[0]
        fig.update_layout(title=f"AUC Curve for Models (Maximum AUC)<br>Model: {model_name}<br>Throw Rate: {throw_rate}<br>Train FRATE: {train_frate}<br>Test FRATE: {test_frate}")

    fig.data[0].on_hover(show_info)

    fig.show()
 
 
# 시간별 사기거래 image

import plotly.graph_objects as go
from ipywidgets import widgets, interact
from IPython.display import display

def plot_fraud_over_time(cc_num):
    # 사용자가 선택한 cc_num에 해당하는 데이터만 필터링
    data = df_fraud[df_fraud['cc_num'] == cc_num]

    # is_fraud가 1인 값의 개수 계산
    fraud_count = (data['is_fraud'] == 1).sum()

    # Plotly Figure 생성
    fig = go.Figure()

    # Fraudulent Transactions (is_fraud = 1)을 빨간색 점으로 추가
    fig.add_trace(go.Scatter(x=data[data['is_fraud'] == 1]['trans_date_trans_time'], 
                             y=data[data['is_fraud'] == 1]['is_fraud'], 
                             mode='markers', 
                             marker=dict(color='red'),
                             name='Fraudulent Transactions'))

    # Legitimate Transactions (is_fraud = 0)을 파란색 점으로 추가
    fig.add_trace(go.Scatter(x=data[data['is_fraud'] == 0]['trans_date_trans_time'], 
                             y=data[data['is_fraud'] == 0]['is_fraud'], 
                             mode='markers', 
                             marker=dict(color='blue'),
                             name='Legitimate Transactions'))

    # 그래프 제목과 축 레이블 설정
    fig.update_layout(title=f'Fraudulent Transactions Over Time \n cc_num: {cc_num}\n Fraudulent Count: {fraud_count}',
                      xaxis_title='Transaction Date and Time',
                      yaxis_title='Fraudulent Transactions')

    # 그래프 출력
    fig.show()

# 드롭다운 목록 위젯 생성
cc_num_dropdown = widgets.Dropdown(
    options=cc_num_value_sort,
    value=cc_num_value_sort[0],  # 초기 선택 값 설정
    description='cc_num:'
)

# 드롭다운 목록 출력
display(cc_num_dropdown)

# 사용자가 선택한 cc_num 값 가져오기 및 시각화
interact(plot_fraud_over_time, cc_num=cc_num_dropdown)



# data
with open('../GNNpaper/posts/fraudTrain.pkl', 'rb') as file:
    fraudTrain = pickle.load(file)    

merged_df = pd.read_csv('../GNNpaper/posts/results/240307_meged.csv')
merged_df = merged_df[merged_df['model'] != 'WeightedEnsemble_L2']
df_group_ccnum = pd.read_csv('./df_group_ccnum.csv')

# data_image
df = fraudTrain[fraudTrain.is_fraud == 1]
fraud1_cc_num = df['cc_num'].unique()
df_fraud = fraudTrain[fraudTrain['cc_num'].isin(fraud1_cc_num)].reset_index()
cc_num_value_sort = df_fraud.groupby("cc_num")["is_fraud"].agg(['sum']).reset_index().sort_values(by='sum',ascending=False)['cc_num'].tolist()


```


# Data {orientation="columns" scrolling="true"}

## Row {.tabset}



```{python}
#| title: Number of transactions per cc_num

itables.show(df_group_ccnum)

```


```{python}
#| title: Transaction information per cc_num
import itables.options as opt
import itables.interactive
def cc_num_filter(selected_cc_num):
    return fraudTrain[fraudTrain['cc_num'] == selected_cc_num]
opt.filters = {'cc_num': 'cc_num_filter'}
itables.show(fraudTrain, options=opt)

```

# Image




# Experiment

## Row {.tabset}

```{python}
#| title: Experiment
from itables import show
show(merged_df, showIndex = False)
```


```{python}
#| title: Experiment1
Ex1 = merged_df[(merged_df['throw_rate'] == 0.5) & (merged_df['train_size'] == 9009)]
from itables import show
show(Ex1, showIndex = False)
```

```{python}
#| title: Experiment1 Visualization
Ex1 = merged_df[(merged_df['throw_rate'] == 0.5) & (merged_df['train_size'] == 9009)]
from itables import show
show(plot_auc_curve(Ex1), showIndex = False)
```