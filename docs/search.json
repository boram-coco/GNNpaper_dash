[
  {
    "objectID": "Untitled.html",
    "href": "Untitled.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport dash\nfrom dash import dcc, html\nfrom dash.dependencies import Input, Output\nimport plotly.express as px\nimport networkx as nx\nimport torch_geometric\nimport pickle\nimport itables\n\n/home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/torch_geometric/typing.py:18: UserWarning: An issue occurred while importing 'pyg-lib'. Disabling its usage. Stacktrace: /home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/libpyg.so: undefined symbol: _ZN2at4_ops12split_Tensor4callERKNS_6TensorEN3c106SymIntEl\n  warnings.warn(f\"An issue occurred while importing 'pyg-lib'. \"\n/home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/torch_geometric/typing.py:31: UserWarning: An issue occurred while importing 'torch-scatter'. Disabling its usage. Stacktrace: /home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/torch_scatter/_scatter_cuda.so: undefined symbol: _ZNK3c107SymBool10guard_boolEPKcl\n  warnings.warn(f\"An issue occurred while importing 'torch-scatter'. \"\n/home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/torch_geometric/typing.py:42: UserWarning: An issue occurred while importing 'torch-sparse'. Disabling its usage. Stacktrace: /home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/torch_sparse/_diag_cuda.so: undefined symbol: _ZN3c106detail19maybe_wrap_dim_slowIlEET_S2_S2_b\n  warnings.warn(f\"An issue occurred while importing 'torch-sparse'. \"\n\n\n\ndf = pd.read_csv('../GNNpaper/posts/results/240307_meged.csv')\ndf = merged_df[merged_df['model'] != 'WeightedEnsemble_L2']\n\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# 필터링 조건에 맞는 데이터 선택\nfiltered_df = df[(df['throw_rate'] == 0.5) & (df['train_size'] == 9009)]\n\n# 모델 별 최대 AUC 값 구하기\nmax_auc_df = filtered_df.groupby('model')['auc'].max().reset_index()\n\n# AUC 커브 그리기\nplt.figure(figsize=(10, 6))\nplt.plot(max_auc_df['model'], max_auc_df['auc'], marker='o', linestyle='-')\nplt.xlabel('Model')\nplt.ylabel('AUC')\nplt.title('AUC Curve for Models (Maximum AUC)')\nplt.xticks(rotation=45)  # x축 라벨 회전\nplt.grid(True)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n\ndef plot_auc_curve(filtered_df):\n    # 모델 별 최대 AUC 값 구하기\n    max_auc_df = filtered_df.groupby('model')['auc'].max().reset_index()\n\n    # AUC 값 기준으로 데이터프레임 정렬 (가장 큰 값이 왼쪽에 오도록)\n    max_auc_df = max_auc_df.sort_values(by='auc', ascending=False)\n\n    # AUC 커브 그리기\n    plt.figure(figsize=(10, 6))\n    plt.plot(max_auc_df['model'], max_auc_df['auc'], marker='o', linestyle='-')\n    plt.xlabel('Model')\n    plt.ylabel('AUC')\n    plt.title('AUC Value for Models')\n    plt.xticks(rotation=45)  # x축 라벨 회전\n    plt.grid(True)\n    plt.tight_layout()\n\n    # 커서를 댔을 때 추가 정보 표시\n    def show_info(event):\n        if event.xdata is not None and event.ydata is not None:\n            model_index = int(round(event.xdata))\n            model_name = max_auc_df.iloc[model_index]['model']\n            throw_rate = filtered_df[filtered_df['model'] == model_name]['throw_rate'].iloc[0]\n            train_frate = filtered_df[filtered_df['model'] == model_name]['train_frate'].iloc[0]\n            test_frate = filtered_df[filtered_df['model'] == model_name]['test_frate'].iloc[0]\n            plt.gca().set_title(f\"AUC Curve for Models (Maximum AUC)\\nModel: {model_name}\\nThrow Rate: {throw_rate}\\nTrain FRATE: {train_frate}\\nTest FRATE: {test_frate}\")\n\n    plt.gcf().canvas.mpl_connect('motion_notify_event', show_info)  # 마우스 이동 이벤트에 대한 콜백 함수 등록\n    plt.show()\n\n# 함수 호출 예시\nplot_auc_curve(filtered_df)\n\n\n\n\n\n\n\n\n\nimport plotly.graph_objs as go\nimport plotly.express as px\n\ndef plot_auc_curve(filtered_df):\n    # 모델 별 최대 AUC 값 구하기\n    max_auc_df = filtered_df.groupby('model')['auc'].max().reset_index()\n\n    # AUC 값 기준으로 데이터프레임 정렬 (가장 큰 값이 왼쪽에 오도록)\n    max_auc_df = max_auc_df.sort_values(by='auc', ascending=False)\n\n    # AUC 커브 그리기\n    fig = px.line(max_auc_df, x='model', y='auc', markers=True)\n    fig.update_traces(line=dict(width=2))  # 라인 굵기 설정\n    fig.update_layout(\n        title='AUC Curve for Models',\n        xaxis_title='Model',\n        yaxis_title='AUC',\n        xaxis=dict(tickangle=45),  # x축 라벨 회전\n        hovermode='closest',  # 마우스 호버시 가장 가까운 점 정보 표시\n    )\n\n    # 커서를 댔을 때 추가 정보 표시\n    def show_info(trace, points, selector):\n        model_name = max_auc_df.iloc[points.point_inds[0]]['model']\n        throw_rate = filtered_df[filtered_df['model'] == model_name]['throw_rate'].iloc[0]\n        train_frate = filtered_df[filtered_df['model'] == model_name]['train_frate'].iloc[0]\n        test_frate = filtered_df[filtered_df['model'] == model_name]['test_frate'].iloc[0]\n        fig.update_layout(title=f\"AUC Curve for Models (Maximum AUC)&lt;br&gt;Model: {model_name}&lt;br&gt;Throw Rate: {throw_rate}&lt;br&gt;Train FRATE: {train_frate}&lt;br&gt;Test FRATE: {test_frate}\")\n\n    fig.data[0].on_hover(show_info)\n\n    fig.show()\n\n# 함수 호출 예시\nplot_auc_curve(filtered_df)"
  }
]