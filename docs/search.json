[
  {
    "objectID": "Untitled.html",
    "href": "Untitled.html",
    "title": "",
    "section": "",
    "text": "import pandas as pd\nimport dash\nfrom dash import dcc, html\nfrom dash.dependencies import Input, Output\nimport plotly.express as px\nimport networkx as nx\nimport torch_geometric\nimport pickle\nimport itables\n\n/home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/torch_geometric/typing.py:18: UserWarning: An issue occurred while importing 'pyg-lib'. Disabling its usage. Stacktrace: /home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/libpyg.so: undefined symbol: _ZN2at4_ops12split_Tensor4callERKNS_6TensorEN3c106SymIntEl\n  warnings.warn(f\"An issue occurred while importing 'pyg-lib'. \"\n/home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/torch_geometric/typing.py:31: UserWarning: An issue occurred while importing 'torch-scatter'. Disabling its usage. Stacktrace: /home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/torch_scatter/_scatter_cuda.so: undefined symbol: _ZNK3c107SymBool10guard_boolEPKcl\n  warnings.warn(f\"An issue occurred while importing 'torch-scatter'. \"\n/home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/torch_geometric/typing.py:42: UserWarning: An issue occurred while importing 'torch-sparse'. Disabling its usage. Stacktrace: /home/coco/anaconda3/envs/py38/lib/python3.8/site-packages/torch_sparse/_diag_cuda.so: undefined symbol: _ZN3c106detail19maybe_wrap_dim_slowIlEET_S2_S2_b\n  warnings.warn(f\"An issue occurred while importing 'torch-sparse'. \"\n\n\n\ndf = pd.read_csv('../GNNpaper/posts/results/240307_meged.csv')\ndf = merged_df[merged_df['model'] != 'WeightedEnsemble_L2']\n\n\nfiltered_df = df[(df['throw_rate'] == 0.5) & (df['train_size'] == 9009)]\n\n\nimport plotly.graph_objs as go\nimport plotly.express as px\n\ndef plot_auc_curve(filtered_df):\n    # 모델 별 최대 AUC 값 구하기\n    max_auc_df = filtered_df.groupby('model')['auc'].max().reset_index()\n\n    # AUC 값 기준으로 데이터프레임 정렬 (가장 큰 값이 왼쪽에 오도록)\n    max_auc_df = max_auc_df.sort_values(by='auc', ascending=False)\n\n    # AUC 커브 그리기\n    fig = px.line(max_auc_df, x='model', y='auc', markers=True)\n    fig.update_traces(line=dict(width=2))  # 라인 굵기 설정\n    fig.update_layout(\n        title='AUC Value for Models',\n        xaxis_title='Model',\n        yaxis_title='AUC',\n        xaxis=dict(tickangle=45),  # x축 라벨 회전\n        hovermode='closest',  # 마우스 호버시 가장 가까운 점 정보 표시\n    )\n\n    # 커서를 댔을 때 추가 정보 표시\n    def show_info(trace, points, selector):\n        model_name = max_auc_df.iloc[points.point_inds[0]]['model']\n        throw_rate = filtered_df[filtered_df['model'] == model_name]['throw_rate'].iloc[0]\n        train_frate = filtered_df[filtered_df['model'] == model_name]['train_frate'].iloc[0]\n        test_frate = filtered_df[filtered_df['model'] == model_name]['test_frate'].iloc[0]\n        fig.update_layout(title=f\"AUC value for Models (Maximum AUC)&lt;br&gt;Model: {model_name}&lt;br&gt;Throw Rate: {throw_rate}&lt;br&gt;Train FRATE: {train_frate}&lt;br&gt;Test FRATE: {test_frate}\")\n\n    fig.data[0].on_hover(show_info)\n\n    fig.show()\n\n# 함수 호출 예시\nplot_auc_curve(filtered_df)\n\n\n                                                \n\n\n\n표시했을 떄, throw rate, frate, trate, size? 까지 뜨면 좋겟음.\n\n\n- 이거 어케 표시해주지 흠\n\nfiltered_df = df[(df['test_frate'] &gt;= 0.001) & (df['test_frate'] &lt;= 0.002) & (df['train_size'] == 9009)]\nplot_auc_curve(filtered_df)\n\n                                                \n\n\n\ndf[(df['test_frate'] &gt;= 0.001) & (df['test_frate'] &lt;= 0.002) & (df['train_size'] == 9009)]\n\n\n\n\n\n\n\n\nmodel\ntime\nacc\npre\nrec\nf1\nauc\ngraph_based\nmethod\nthrow_rate\ntrain_size\ntrain_cols\ntrain_frate\ntest_size\ntest_frate\nhyper_params\ntheta\ngamma\n\n\n\n\n65\nKNeighborsUnif\nNaN\n0.876099\n0.008607\n0.808696\n0.017033\n0.917166\nFalse\nAuto_not_best\n0.048660\n9009\n['amt']\n0.50383\n86634\n0.001327\nNaN\nNaN\nNaN\n\n\n66\nKNeighborsDist\nNaN\n0.869532\n0.008090\n0.800000\n0.016018\n0.881220\nFalse\nAuto_not_best\n0.048660\n9009\n['amt']\n0.50383\n86634\n0.001327\nNaN\nNaN\nNaN\n\n\n67\nLightGBMXT\nNaN\n0.884537\n0.009718\n0.852174\n0.019218\n0.946323\nFalse\nAuto_not_best\n0.048660\n9009\n['amt']\n0.50383\n86634\n0.001327\nNaN\nNaN\nNaN\n\n\n68\nLightGBM\nNaN\n0.900974\n0.010865\n0.817391\n0.021444\n0.942743\nFalse\nAuto_not_best\n0.048660\n9009\n['amt']\n0.50383\n86634\n0.001327\nNaN\nNaN\nNaN\n\n\n69\nRandomForestGini\nNaN\n0.849874\n0.007338\n0.834783\n0.014548\n0.913884\nFalse\nAuto_not_best\n0.048660\n9009\n['amt']\n0.50383\n86634\n0.001327\nNaN\nNaN\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n2632\nExtraTreesEntr\nNaN\n0.860046\n0.008597\n0.865385\n0.017026\n0.950198\nFalse\nAuto_not_best\n0.018233\n9009\n['amt']\n0.50383\n259892\n0.001401\nNaN\nNaN\nNaN\n\n\n2633\nNeuralNetFastAI\nNaN\n0.965355\n0.029412\n0.741758\n0.056580\n0.893303\nFalse\nAuto_not_best\n0.018233\n9009\n['amt']\n0.50383\n259892\n0.001401\nNaN\nNaN\nNaN\n\n\n2634\nXGBoost\nNaN\n0.899735\n0.012448\n0.901099\n0.024556\n0.965800\nFalse\nAuto_not_best\n0.018233\n9009\n['amt']\n0.50383\n259892\n0.001401\nNaN\nNaN\nNaN\n\n\n2635\nNeuralNetTorch\nNaN\n0.872970\n0.009819\n0.898352\n0.019425\n0.958730\nFalse\nAuto_not_best\n0.018233\n9009\n['amt']\n0.50383\n259892\n0.001401\nNaN\nNaN\nNaN\n\n\n2636\nLightGBMLarge\nNaN\n0.856540\n0.008964\n0.925824\n0.017756\n0.963436\nFalse\nAuto_not_best\n0.018233\n9009\n['amt']\n0.50383\n259892\n0.001401\nNaN\nNaN\nNaN\n\n\n\n\n284 rows × 18 columns"
  }
]